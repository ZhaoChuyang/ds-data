{
  "openapi": "3.0.2",
  "info": {
    "version": "1.0.0",
    "title": "Education Track",
    "termsOfService": "https://example.com/terms/",
    "contact": {
      "email": "contact@example.com",
      "url": "http://example.com/contact"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://redocly.github.io/openapi-template/logo.png"
    },
    "description": "这是 Education Track 项目的 API 文档，本文档旨在提供服务端与前端的接口描述，规范开发过程。\n"
  },
  "externalDocs": {
    "description": "Find out how to create a GitHub repo for your OpenAPI definition.",
    "url": "https://github.com/Rebilly/generator-openapi-repo"
  },
  "tags": [
    {
      "name": "Echo",
      "description": "Example echo operations"
    },
    {
      "name": "User",
      "description": "用户信息，账号信息相关操作"
    },
    {
      "name": "Gallery",
      "description": "用户个人题库相关操作"
    }
  ],
  "servers": [
    {
      "url": "http://example.com/api/v1",
      "description": "开发服务器"
    },
    {
      "url": "https://example.com/api/v1",
      "description": "部署服务器"
    }
  ],
  "paths": {
    "/users/{username}": {
      "parameters": [
        {
          "name": "pretty_print",
          "in": "query",
          "description": "Pretty print response",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by user name",
        "description": "Some description of the operation.\nYou can use `markdown` here.\n",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_email",
            "in": "query",
            "description": "Filter users without email",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "security": [
          {
            "main_auth": [
              "read:users"
            ]
          },
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "username": "user1",
                  "email": "user@example.com"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "main_auth": [
              "write:users"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user object",
          "required": true
        }
      }
    },
    "/echo": {
      "post": {
        "tags": [
          "Echo"
        ],
        "summary": "Echo test",
        "description": "Receive the exact message you've sent",
        "operationId": "echo",
        "security": [
          {
            "api_key": []
          },
          {
            "basic_auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "$ref": "#/components/headers/ExpiresAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "response": {
                    "value": "Hello world!"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "Hello world!"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string",
                "example": "Hello world!"
              }
            }
          },
          "description": "Echo payload",
          "required": true
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "source": "API.v1.Echo echo = new API.v1.Echo();\necho.message = \"Hello World!\");\nEchoResponse response = echo.post();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Success\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$form = new \\API\\Entities\\Echo();\n$form->setMessage(\"Hello World!\");\ntry {\n    $pet = $client->echo()->post($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
          }
        ]
      }
    },
    "/gallery/{user_id}": {
      "summary": "与用户题库有关的操作",
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "description": "用户ID",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Gallery"
        ],
        "summary": "查看个人题库",
        "description": "返回用户题库中部分题目记录",
        "security": [
          {
            "basic_auth": [
              "oauth 2.0身份验证",
              "权限验证"
            ]
          }
        ],
        "parameters": [
          {
            "name": "ulimit",
            "in": "query",
            "description": "控制返回题目记录的数量，防止数量过大导致载荷过大，影响传输效率",
            "schema": {
              "type": "integer",
              "maximum": 30,
              "minimum": 0
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "返回题目的排序方式，默认是按照时间由近至远排序。注意，支持的排序方式还未 确定，至少包含 [时间，错误率]\n",
            "schema": {
              "type": "string",
              "default": "time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/record"
                  },
                  "example": [
                    {
                      "rid": 98678,
                      "content": "题目内容...",
                      "upload_time": "2010-03-04",
                      "tags": [
                        "圆锥曲线",
                        "三角函数"
                      ],
                      "difficulty": 7
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Gallery"
        ],
        "summary": "增加单个记录",
        "description": "向个人题库中增加单条记录，注意该记录由单个题目搜索模块得到，正确性需要手动标注。<br> **Note:**\n  - 所上传的题目必须已经存在于系统题库中\n  - 如何处理不存在于题库中的题目?\n",
        "security": [
          {
            "main_auth": []
          },
          {
            "basic_auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pid": {
                    "type": "string",
                    "description": "题目ID"
                  },
                  "upload_time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "上传时间，客户端生成"
                  },
                  "status": {
                    "type": "boolean",
                    "description": "是否做对"
                  },
                  "token": {
                    "type": "string",
                    "description": "个人身份验证Token，由OAuth 2.0生成"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "Gallery"
        ],
        "summary": "批量增加记录",
        "description": "向用户个人题库中批量增加题目记录，该方法的题目记录是由批量搜索方法生成， 题目正确性已经由算法标注，用户可以自己修改。<br> **Note:**\n  - 所上传的题目必须在系统题库中已经存在，并有唯一标识的题目ID\n  - 不存在系统题库中的题目需要调用其他接口处理\n",
        "security": [
          {
            "main_auth": []
          },
          {
            "basic_auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "records": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "pid": {
                          "type": "string",
                          "description": "题目ID"
                        },
                        "status": {
                          "type": "boolean",
                          "description": "是否做对"
                        }
                      }
                    }
                  },
                  "upload_time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "上传时间，客户端生成"
                  },
                  "token": {
                    "type": "string",
                    "description": "个人身份验证Token，由OAuth 2.0生成"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "main_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "scopes": {
              "read:users": "read users info",
              "write:users": "modify or remove users"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api_key"
      },
      "basic_auth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "Email": {
        "description": "User email address",
        "type": "string",
        "format": "test",
        "example": "john.smith@example.com"
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "description": "User supplied username",
            "type": "string",
            "minLength": 4,
            "example": "John78"
          },
          "firstName": {
            "description": "User first name",
            "type": "string",
            "minLength": 1,
            "example": "John"
          },
          "lastName": {
            "description": "User last name",
            "type": "string",
            "minLength": 1,
            "example": "Smith"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "record": {
        "type": "object",
        "properties": {
          "rid": {
            "type": "string",
            "description": "题目记录ID"
          },
          "pid": {
            "type": "string",
            "description": "题目ID"
          },
          "upload_time": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string",
            "description": "题目内容"
          },
          "tags": {
            "type": "array",
            "description": "题目标签，由算法生成，并定期更新"
          },
          "solution": {
            "type": "string",
            "description": "题目解答，可以为空",
            "default": "None"
          },
          "status": {
            "type": "boolean",
            "description": "题目是否做对"
          },
          "difficulty": {
            "type": "integer",
            "description": "题目难度"
          }
        }
      }
    },
    "headers": {
      "ExpiresAfter": {
        "description": "date in UTC when token expires",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}